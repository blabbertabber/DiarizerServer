// Code generated by counterfeiter. DO NOT EDIT.
package timesandsizefakes

import (
	"sync"

	"github.com/blabbertabber/speechbroker/timesandsize"
)

type FakeTimesAndSizeToPath struct {
	WriteTimesAndSizeToPathStub        func(*timesandsize.TimesAndSize, string)
	writeTimesAndSizeToPathMutex       sync.RWMutex
	writeTimesAndSizeToPathArgsForCall []struct {
		arg1 *timesandsize.TimesAndSize
		arg2 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTimesAndSizeToPath) WriteTimesAndSizeToPath(arg1 *timesandsize.TimesAndSize, arg2 string) {
	fake.writeTimesAndSizeToPathMutex.Lock()
	fake.writeTimesAndSizeToPathArgsForCall = append(fake.writeTimesAndSizeToPathArgsForCall, struct {
		arg1 *timesandsize.TimesAndSize
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("WriteTimesAndSizeToPath", []interface{}{arg1, arg2})
	fake.writeTimesAndSizeToPathMutex.Unlock()
	if fake.WriteTimesAndSizeToPathStub != nil {
		fake.WriteTimesAndSizeToPathStub(arg1, arg2)
	}
}

func (fake *FakeTimesAndSizeToPath) WriteTimesAndSizeToPathCallCount() int {
	fake.writeTimesAndSizeToPathMutex.RLock()
	defer fake.writeTimesAndSizeToPathMutex.RUnlock()
	return len(fake.writeTimesAndSizeToPathArgsForCall)
}

func (fake *FakeTimesAndSizeToPath) WriteTimesAndSizeToPathArgsForCall(i int) (*timesandsize.TimesAndSize, string) {
	fake.writeTimesAndSizeToPathMutex.RLock()
	defer fake.writeTimesAndSizeToPathMutex.RUnlock()
	return fake.writeTimesAndSizeToPathArgsForCall[i].arg1, fake.writeTimesAndSizeToPathArgsForCall[i].arg2
}

func (fake *FakeTimesAndSizeToPath) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeTimesAndSizeToPathMutex.RLock()
	defer fake.writeTimesAndSizeToPathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTimesAndSizeToPath) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ timesandsize.TimesAndSizeToPath = new(FakeTimesAndSizeToPath)
