// Code generated by counterfeiter. DO NOT EDIT.
package httphandlerfakes

import (
	"io"
	"os"
	"sync"

	"github.com/blabbertabber/speechbroker/httphandler"
)

type FakeFileSystem struct {
	MkdirAllStub        func(string, os.FileMode) error
	mkdirAllMutex       sync.RWMutex
	mkdirAllArgsForCall []struct {
		arg1 string
		arg2 os.FileMode
	}
	mkdirAllReturns struct {
		result1 error
	}
	mkdirAllReturnsOnCall map[int]struct {
		result1 error
	}
	CreateStub        func(string) (*os.File, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 string
	}
	createReturns struct {
		result1 *os.File
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *os.File
		result2 error
	}
	CreateWriterStub        func(string) (*os.File, io.Writer, error)
	createWriterMutex       sync.RWMutex
	createWriterArgsForCall []struct {
		arg1 string
	}
	createWriterReturns struct {
		result1 *os.File
		result2 io.Writer
		result3 error
	}
	createWriterReturnsOnCall map[int]struct {
		result1 *os.File
		result2 io.Writer
		result3 error
	}
	CopyStub        func(io.Writer, io.Reader) (int64, error)
	copyMutex       sync.RWMutex
	copyArgsForCall []struct {
		arg1 io.Writer
		arg2 io.Reader
	}
	copyReturns struct {
		result1 int64
		result2 error
	}
	copyReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	StatStub        func(string) (os.FileInfo, error)
	statMutex       sync.RWMutex
	statArgsForCall []struct {
		arg1 string
	}
	statReturns struct {
		result1 os.FileInfo
		result2 error
	}
	statReturnsOnCall map[int]struct {
		result1 os.FileInfo
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileSystem) MkdirAll(arg1 string, arg2 os.FileMode) error {
	fake.mkdirAllMutex.Lock()
	ret, specificReturn := fake.mkdirAllReturnsOnCall[len(fake.mkdirAllArgsForCall)]
	fake.mkdirAllArgsForCall = append(fake.mkdirAllArgsForCall, struct {
		arg1 string
		arg2 os.FileMode
	}{arg1, arg2})
	fake.recordInvocation("MkdirAll", []interface{}{arg1, arg2})
	fake.mkdirAllMutex.Unlock()
	if fake.MkdirAllStub != nil {
		return fake.MkdirAllStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.mkdirAllReturns.result1
}

func (fake *FakeFileSystem) MkdirAllCallCount() int {
	fake.mkdirAllMutex.RLock()
	defer fake.mkdirAllMutex.RUnlock()
	return len(fake.mkdirAllArgsForCall)
}

func (fake *FakeFileSystem) MkdirAllArgsForCall(i int) (string, os.FileMode) {
	fake.mkdirAllMutex.RLock()
	defer fake.mkdirAllMutex.RUnlock()
	return fake.mkdirAllArgsForCall[i].arg1, fake.mkdirAllArgsForCall[i].arg2
}

func (fake *FakeFileSystem) MkdirAllReturns(result1 error) {
	fake.MkdirAllStub = nil
	fake.mkdirAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileSystem) MkdirAllReturnsOnCall(i int, result1 error) {
	fake.MkdirAllStub = nil
	if fake.mkdirAllReturnsOnCall == nil {
		fake.mkdirAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mkdirAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileSystem) Create(arg1 string) (*os.File, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Create", []interface{}{arg1})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *FakeFileSystem) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeFileSystem) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1
}

func (fake *FakeFileSystem) CreateReturns(result1 *os.File, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystem) CreateReturnsOnCall(i int, result1 *os.File, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *os.File
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystem) CreateWriter(arg1 string) (*os.File, io.Writer, error) {
	fake.createWriterMutex.Lock()
	ret, specificReturn := fake.createWriterReturnsOnCall[len(fake.createWriterArgsForCall)]
	fake.createWriterArgsForCall = append(fake.createWriterArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CreateWriter", []interface{}{arg1})
	fake.createWriterMutex.Unlock()
	if fake.CreateWriterStub != nil {
		return fake.CreateWriterStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.createWriterReturns.result1, fake.createWriterReturns.result2, fake.createWriterReturns.result3
}

func (fake *FakeFileSystem) CreateWriterCallCount() int {
	fake.createWriterMutex.RLock()
	defer fake.createWriterMutex.RUnlock()
	return len(fake.createWriterArgsForCall)
}

func (fake *FakeFileSystem) CreateWriterArgsForCall(i int) string {
	fake.createWriterMutex.RLock()
	defer fake.createWriterMutex.RUnlock()
	return fake.createWriterArgsForCall[i].arg1
}

func (fake *FakeFileSystem) CreateWriterReturns(result1 *os.File, result2 io.Writer, result3 error) {
	fake.CreateWriterStub = nil
	fake.createWriterReturns = struct {
		result1 *os.File
		result2 io.Writer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFileSystem) CreateWriterReturnsOnCall(i int, result1 *os.File, result2 io.Writer, result3 error) {
	fake.CreateWriterStub = nil
	if fake.createWriterReturnsOnCall == nil {
		fake.createWriterReturnsOnCall = make(map[int]struct {
			result1 *os.File
			result2 io.Writer
			result3 error
		})
	}
	fake.createWriterReturnsOnCall[i] = struct {
		result1 *os.File
		result2 io.Writer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFileSystem) Copy(arg1 io.Writer, arg2 io.Reader) (int64, error) {
	fake.copyMutex.Lock()
	ret, specificReturn := fake.copyReturnsOnCall[len(fake.copyArgsForCall)]
	fake.copyArgsForCall = append(fake.copyArgsForCall, struct {
		arg1 io.Writer
		arg2 io.Reader
	}{arg1, arg2})
	fake.recordInvocation("Copy", []interface{}{arg1, arg2})
	fake.copyMutex.Unlock()
	if fake.CopyStub != nil {
		return fake.CopyStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.copyReturns.result1, fake.copyReturns.result2
}

func (fake *FakeFileSystem) CopyCallCount() int {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return len(fake.copyArgsForCall)
}

func (fake *FakeFileSystem) CopyArgsForCall(i int) (io.Writer, io.Reader) {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return fake.copyArgsForCall[i].arg1, fake.copyArgsForCall[i].arg2
}

func (fake *FakeFileSystem) CopyReturns(result1 int64, result2 error) {
	fake.CopyStub = nil
	fake.copyReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystem) CopyReturnsOnCall(i int, result1 int64, result2 error) {
	fake.CopyStub = nil
	if fake.copyReturnsOnCall == nil {
		fake.copyReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.copyReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystem) Stat(arg1 string) (os.FileInfo, error) {
	fake.statMutex.Lock()
	ret, specificReturn := fake.statReturnsOnCall[len(fake.statArgsForCall)]
	fake.statArgsForCall = append(fake.statArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Stat", []interface{}{arg1})
	fake.statMutex.Unlock()
	if fake.StatStub != nil {
		return fake.StatStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.statReturns.result1, fake.statReturns.result2
}

func (fake *FakeFileSystem) StatCallCount() int {
	fake.statMutex.RLock()
	defer fake.statMutex.RUnlock()
	return len(fake.statArgsForCall)
}

func (fake *FakeFileSystem) StatArgsForCall(i int) string {
	fake.statMutex.RLock()
	defer fake.statMutex.RUnlock()
	return fake.statArgsForCall[i].arg1
}

func (fake *FakeFileSystem) StatReturns(result1 os.FileInfo, result2 error) {
	fake.StatStub = nil
	fake.statReturns = struct {
		result1 os.FileInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystem) StatReturnsOnCall(i int, result1 os.FileInfo, result2 error) {
	fake.StatStub = nil
	if fake.statReturnsOnCall == nil {
		fake.statReturnsOnCall = make(map[int]struct {
			result1 os.FileInfo
			result2 error
		})
	}
	fake.statReturnsOnCall[i] = struct {
		result1 os.FileInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystem) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mkdirAllMutex.RLock()
	defer fake.mkdirAllMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.createWriterMutex.RLock()
	defer fake.createWriterMutex.RUnlock()
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	fake.statMutex.RLock()
	defer fake.statMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileSystem) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ httphandler.FileSystem = new(FakeFileSystem)
