// Code generated by counterfeiter. DO NOT EDIT.
package httphandlerfakes

import (
	"sync"

	"github.com/blabbertabber/speechbroker/httphandler"
)

type FakeDockerRunner struct {
	RunStub        func(action string, resultsDir string, dockerCommandArgs ...string)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		action            string
		resultsDir        string
		dockerCommandArgs []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDockerRunner) Run(action string, resultsDir string, dockerCommandArgs ...string) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		action            string
		resultsDir        string
		dockerCommandArgs []string
	}{action, resultsDir, dockerCommandArgs})
	fake.recordInvocation("Run", []interface{}{action, resultsDir, dockerCommandArgs})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		fake.RunStub(action, resultsDir, dockerCommandArgs...)
	}
}

func (fake *FakeDockerRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeDockerRunner) RunArgsForCall(i int) (string, string, []string) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].action, fake.runArgsForCall[i].resultsDir, fake.runArgsForCall[i].dockerCommandArgs
}

func (fake *FakeDockerRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDockerRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ httphandler.DockerRunner = new(FakeDockerRunner)
